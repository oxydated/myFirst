to do:

1. dual quaternion functions in CPU side
	1.1. implemented as function arrays - no proper structure this far
		1.1.1. dual quaternions will be loaded onto shaders as composition of vec4
	1.2. transformations implemented as dual quaternions
	
2. animation functions
	2.1. hierarchy functions
		2.1.1. pointer or indexing? INDEXING
			2.1.1.1. Every bone will point to it's parent via integer index instead of pointers
				2.1.1.1.1. such hierarchy can be implemented as an array of parent indexes
				
			2.1.1.2. Bones will be displaced in a contiguous array obeying the ordering of it's indexes
				2.1.1.2.1. It applies only to the arrays sourced to the shader
			2.1.1.3. The bones's local transformation for a given time will be calculated as defined in 2.2.
				2.1.1.3.1. Then the global transformation will be calculated by traversing the hierarchy
				2.1.1.3.2. The global transformation of the parent will be applied to it's children
				2.1.1.3.3. A second array will be built this way, with the global transformations of the hierarchy
				{getSkeletonForTime() in oxyAnimateMesh.py}
				
	2.2. interpolation functions
		2.2.1. implemented as dual quaternion interpolation
		{getQuatFromTrackForTime() in oxySourceAnimation.py}
			2.2.1.1. implemented as a structure (refer to item 3.3.1.1.)
		2.2.3. will be fed by the bone track information
		
	2.3. bone functions
		2.3.1. bone representation as an entry in the tracks list
			2.3.1.1. each bone keeps a reference against it's entry in the tracks list
	
	2.4. animation cycle
		2.4.1. the time parameter for the interpolation is the current machine time
			2.4.1.1. the time will be clipped to lie inside the animation duration
			{getIntervalFromTrackForTime() in oxySourceAnimation.py}
		
		2.4.2. for each bone in the skeleton, it will be returned the interval the time parameter is lying within
			2.4.2.1. searching for the latest starting time will be enough to find the interval
				2.4.2.1.1. The intervals list must be obviously sorted by the interval's starting time
				2.4.2.1.2. As the intervals list will be likely small on each track, STL could be used

				2.4.2.1.3. time intervals will be implemented as a structure, the key-frame structure
				2.4.2.1.4. the structure in 2.4.2.1.3. must point to an interpolation structure defined as in 3.3.1.1. 

=======================================================================================================	implementation details

stages dependency:
	skin shader needs to know bone tracks
		skin shader needs to point only to skeleton hierarchy bone tracks
			only skeleton hierarchy bones will be processed in stage 
			
THE PROCESS SO FAR:

skin holds skin pose bones transformation in global space
			
bone tracks hold local transformation

(0)loop interpolates bones local transformations
		get time from the system 
			get starting system time for animation
			use windows function:
				DWORD WINAPI GetTickCount(void);
				
				structure sceneClock:
					DWORD startingTime
					DWORD timeElapsed
					DWORD sizeOfCycle
					
			get total time for animation cycle from the Tracks			
			
///////////////////////////////////////////////////////////////////////////////////////////////////////// done	
		
		{getIntervalFromTrackForTime() in oxySourceAnimation.py}
		{getQuatFromTrackForTime() in oxySourceAnimation.py}
		
	(1)and calculate global transformation for every bone in hierarchy. An array with global transformations for every bone will be calculated
			{getSkeletonForTime() in oxyAnimateMesh.py}
			** will descend by the tree in struct skeleton
			**globalTransforms[] will have the same size as sceneTracks.numTracks and will be indexed by bone Index
		
/////////////////////////////////////////////////////////////////////////////////////////////////////////
			
		(2)a new array will be produced by transforming each bone in hierarchy from skin pose to current global transformation (this is the array to be sourced to the shader)
				for every entry in skinData.skinPoseBone[]
				transforms every skin pose bone to transformation indexed by bone Index in globalTransforms[]
				{transfFromInitialToCurrentPose() in oxyAnimateMesh.py}
					produce array fromInitialPoseToCurrentTransf[]

		*
		*
		***** track indexes should point here
		Fill non-skeleton nodes tracks with identity dual quaternions?
		*scan all the scene graph for nodes
		*make room in array for every node
		*fill all of them with identity transforms AT BEGINNING
		*since the process for skin deformation uses the skeleton and skin pose as sources, any node not involved in the current skin's deformation will remain as identity
		**those will not be used by the skin shader at all
	
sceneTracks.numTracks will be used in (1) and (2)
skin.numberSkinBones will be used in (2)
skeleton.numBones will be used in (1)
=======================================================================================================

			2.4.2.2. the time parameter will be normalized by the boundaries of the found interval

3. animation structures
	3.1. bone structures
	3.2. hierarchy structures
		3.2.1. bone indexing
			3.2.1.1. bone indexing will be built by the xml loader as defined in 4.1.1.
	
	3.3. bone track structure
		3.3.1. interpolation information will be indexed by time value pairs
		3.3.1. interpolation will consist on the starting dual quaternion and quaternion parameters
			3.3.1.1. these will be the members of the interpolation data structure
			3.3.1.2. such dual quaternions and parameters are in the local space of the bone 
			
		3.3.2. so each track will be constructed as an array of key-frame structures as defined in 2.4.2.1.3.

4. animation import
	4.1. bone xml loading
		4.1.1. xml loading must preserve the bones indexes while building the bone array
	4.2. dual quaternion loading
	
5. animation shader functions
	5.1. animation uniforms and arrays
	5.2. dual quaternion implementation in shaders
		5.2.1 naïve approach first

6. skin functions
	6.1. bone references must be carried on by integer indexes
	6.2. bones must be referenced by a int-casted float inside shader
		6.2.1. Does this answer the question in 2.1.1.? Definitely.
		
	6.3. skin deformation all carried on by shader
		6.3.1. shader needs to know the weight for each bone for the vertex
		6.3.2. shader needs to know which bones affects a given vertex
			6.3.2. such information is sourced to the shader as vertex attributes, as defined in 6.4.2.1.1 and .2
		
	6.4. vertex skin weights defined by array of float	
		6.4.1. loaded onto shaders as uniforms
		6.4.2. bones indexes will be loaded onto shaders as uniforms as well
			6.4.2.1. the lists of bone indexes for every vertex will be joined in a unique list
				6.4.2.1.1. each vertex must know the offset for it's particular set of bone indexes
				6.4.2.1.2. each vertex must know how many bones do affect it.

			6.4.2.2. bone index uniform array and bone weight array are to be paired
				6.4.2.2.1. the same offset and number of bones in 6.4.2.1. applies to the weight uniform array
				
		6.4.3. there must be a skin vertex entry for every geometry vertex 
			6.4.3.1. every skin vertex will be copied for all the vertices with same vertID
			
		6.4.4. the STL vector template can be used to build the list in 6.4.2.1.
	
	6.5. dual quaternion blending will be carried on by the shader
	{blendDualQuatFromMesh() in oxyAnimateMesh.py}
		6.5.1. dual quaternion sum and product by a scalar to be implemented in shader
		6.5.2. point transformation by a dual quaternion to be implemented in shader as well
			6.5.2.1. this implies in implementation of the dual quaternion product in shader

=======================================================================================================	implementation details

skinPose bone structure
this structure will be sourced to transfFromInitialToCurrentPose() 

For every vertex in shader stream:

{blendDualQuatFromMesh() in oxyAnimateMesh.py}
(0) loop for the number of bones in skinData.boneNumVertAttrib
	starting from skinData.boneIndexesForSkinVertices, get transformations from fromInitialPoseToCurrentTransf[]
		test for shortest path and complement the quaternion if necessary
	weight the transformation by skinData.boneWeightForSkinVertices
	
	(1)sum the result
	
		(2)apply the transformation to the vertex
	
	
=======================================================================================================
	
	6.6. bone references will be paired with bone dual quaternion transformations in skin pose

		6.6.1. as already presented in the processed xml file.
		6.6.2. a new array will be built with the transformation from skin pose to array in 2.1.1.3.3.
		{transfFromInitialToCurrentPose() in oxyAnimateMesh.py}
			6.6.2.1. this is to be done by CPU 
			6.6.2.2. this array will be sourced to the shader as an uniform

=======================================================================================================	implementation details

Simple array of arrays of 8 floats, ordered by the bone index
	
=======================================================================================================

				6.6.2.2.1. the indexes in the array in 6.4.2. point to this array
				6.6.2.2.2. these are the dual quaternions to be blended in 6.5
				
7. implement LookAt Camera

=======================================================================================================	implementation details

Just as in look_at_test_anim.py:

## def translationMatrix( t )

# def quaterionRotationMatrix( q )

## normalize = lambda Vec :  Vec / np.linalg.norm( Vec[:3] )

# perpendicular = lambda Vec, normV :  Vec[:3] - ( np.dot(Vec[:3], normV)*normV )

# cosAngleFromVectors = lambda u, v: np.dot(u[:3], v[:3]) / (np.linalg.norm(u[:3]) * np.linalg.norm(v[:3]) )

# halfAngleCos = lambda cosine: np.sqrt( (1 + cosine)/2.0)

# halfAngleSin = lambda cosine: np.sqrt( (1 - cosine)/2.0)

def getLookAtMatrix( CamPos, TargetPos, Up )

def lookAtCameraMatrix( RealTargetPos, RealCamPos, Up )
	
=======================================================================================================
	